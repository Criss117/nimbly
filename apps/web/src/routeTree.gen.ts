/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ErrorRouteImport } from './routes/error'
import { Route as IndexRouteImport } from './routes/index'
import { Route as privateSalesRouteImport } from './routes/(private)/sales'
import { Route as privateDashboardRouteImport } from './routes/(private)/dashboard'
import { Route as privateDashboardProductsRouteImport } from './routes/(private)/dashboard/products'

const ErrorRoute = ErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const privateSalesRoute = privateSalesRouteImport.update({
  id: '/(private)/sales',
  path: '/sales',
  getParentRoute: () => rootRouteImport,
} as any)
const privateDashboardRoute = privateDashboardRouteImport.update({
  id: '/(private)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const privateDashboardProductsRoute =
  privateDashboardProductsRouteImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => privateDashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/dashboard': typeof privateDashboardRouteWithChildren
  '/sales': typeof privateSalesRoute
  '/dashboard/products': typeof privateDashboardProductsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/dashboard': typeof privateDashboardRouteWithChildren
  '/sales': typeof privateSalesRoute
  '/dashboard/products': typeof privateDashboardProductsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/(private)/dashboard': typeof privateDashboardRouteWithChildren
  '/(private)/sales': typeof privateSalesRoute
  '/(private)/dashboard/products': typeof privateDashboardProductsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/error' | '/dashboard' | '/sales' | '/dashboard/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/error' | '/dashboard' | '/sales' | '/dashboard/products'
  id:
    | '__root__'
    | '/'
    | '/error'
    | '/(private)/dashboard'
    | '/(private)/sales'
    | '/(private)/dashboard/products'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ErrorRoute: typeof ErrorRoute
  privateDashboardRoute: typeof privateDashboardRouteWithChildren
  privateSalesRoute: typeof privateSalesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/sales': {
      id: '/(private)/sales'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof privateSalesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/dashboard': {
      id: '/(private)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof privateDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/dashboard/products': {
      id: '/(private)/dashboard/products'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof privateDashboardProductsRouteImport
      parentRoute: typeof privateDashboardRoute
    }
  }
}

interface privateDashboardRouteChildren {
  privateDashboardProductsRoute: typeof privateDashboardProductsRoute
}

const privateDashboardRouteChildren: privateDashboardRouteChildren = {
  privateDashboardProductsRoute: privateDashboardProductsRoute,
}

const privateDashboardRouteWithChildren =
  privateDashboardRoute._addFileChildren(privateDashboardRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ErrorRoute: ErrorRoute,
  privateDashboardRoute: privateDashboardRouteWithChildren,
  privateSalesRoute: privateSalesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
